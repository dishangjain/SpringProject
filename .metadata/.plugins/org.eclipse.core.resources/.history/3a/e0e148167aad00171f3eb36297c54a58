package com.capgemini.hotelbooking.daos;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.capgemini.hotelbooking.beans.RoomBean;
import com.capgemini.hotelbooking.exceptions.BookingException;

public class AdminDao implements IAdminDao {
	static Logger myLogger = Logger.getLogger("myLogger");
	
	private int getHotelID() throws Bo{
		
	}
	
	private int getRoomID() {
		return 0;
	}
	
	@Override
	public int addRoomDetails(RoomBean roomBean) throws BookingException {
		myLogger.info("Execution in addRoomDetails()");
		
		String query = "insert into ROOMDETAILS(ROOM_ID, HOTEL_ID, ROOM_NO, ROOM_TYPE, PER_NIGHT_RATE, AVAILABILITY, PHOTO)"
						+ "values (?, ?, ?, ?, ?, 'T', ?)";
		int recsAffected = 0;
		
		try(
			PreparedStatement preparedStatement = connect.prepareStatement(query);
		){
			roomBean.setRoomID(getRoomID());
			preparedStatement.setInt(1, roomBean.getRoomID());
			preparedStatement.setInt(2, roomBean.getHotelID());
			preparedStatement.setString(3, roomBean.getRoomNumber());
			preparedStatement.setString(4, roomBean.getRoomType());
			preparedStatement.setFloat(5, roomBean.getPerNightRate());
			preparedStatement.setString(6, roomBean.getPhoto());
						
			myLogger.info("Query Execution : " + query);
			recsAffected = preparedStatement.executeUpdate();
			
			if(recsAffected > 0){
				myLogger.info("New Entry -> Room ID : "+ roomBean.getRoomID()
									+ "\nHotel ID : " + roomBean.getHotelID()
									+ "\nRoom Number: " + roomBean.getRoomNumber()
									+ "\nRoom Type : " + roomBean.getRoomType()
									+ "\nPer Night Rate : " + roomBean.getPerNightRate()
									+ "\nAvailability : " + roomBean.isAvailable()
									+ "\nPhoto : " + roomBean.getPhoto());
			}
			else{
				myLogger.error("System Error");
				throw new BookingException("System Error. Try Again Later.");
			}
			
		} catch (SQLException e) {
			myLogger.error("Exception from addRoomDetails()", e);
			throw new BookingException("Problem in adding data.", e);
		}
		return roomBean.getRoomID();
	}

	@Override
	public int addHotelDetails(HotelBean hotelBean) throws BookingException {
		myLogger.info("Execution in addHotelDetails()");
		
		String query = "insert into HOTELS(HOTEL_ID, CITY, HOTEL_NAME, ADDRESS, DESCRIPTION, AVG_RATE_PER_NIGHT, PHONE_NO1,"
						+ "PHONE_NO2, RATING, EMAIL, FAX) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		int recsAffected = 0;
		
		try(
			PreparedStatement preparedStatement = connect.prepareStatement(query);
		){
			hotelBean.setHotelID(getHotelID());
			preparedStatement.setInt(1, hotelBean.getHotelID());
			preparedStatement.setString(2, hotelBean.getCity());
			preparedStatement.setString(3, hotelBean.getHotelName());
			preparedStatement.setString(4, hotelBean.getAddress());
			preparedStatement.setString(5, hotelBean.getDescription());
			preparedStatement.setFloat(6, hotelBean.getAvgRatePerNight());
			preparedStatement.setString(7, hotelBean.getPhoneNumber1());
			preparedStatement.setString(8, hotelBean.getPhoneNumber2());
			preparedStatement.setString(9, hotelBean.getRating());
			preparedStatement.setString(10, hotelBean.getEmail());
			preparedStatement.setString(11, hotelBean.getFax());
						
			myLogger.info("Query Execution : " + query);
			recsAffected = preparedStatement.executeUpdate();
			
			if(recsAffected > 0){
				myLogger.info("New Entry -> Hotel ID : "+ hotelBean.getHotelID()
									+ "\nCity : " + hotelBean.getCity()
									+ "\nHotel Name : " + hotelBean.getHotelName()
									+ "\nAddress : " + hotelBean.getAddress()
									+ "\nDescription : " + hotelBean.getDescription()
									+ "\nAverage Rate per Night : " + hotelBean.getAvgRatePerNight()
									+ "\nPhone Number 1 : " + hotelBean.getPhoneNumber1()
									+ "\nPhone Number 2 : " + hotelBean.getPhoneNumber2()
									+ "\nRating : " + hotelBean.getRating()
									+ "\nFax : " + hotelBean.getFax());
			}
			else{
				myLogger.error("System Error");
				throw new BookingException("System Error. Try Again Later.");
			}
			
		} catch (SQLException e) {
			myLogger.error("Exception from addHotelDetails()", e);
			throw new BookingException("Problem in adding data.", e);
		}
		return hotelBean.getHotelID();
	}

	@Override
	public int updateHotelDetails(int hotelID, String attributeName, String attributeValue) 
			throws BookingException {
		myLogger.info("Execution in updateHotelDetails()");
		String query = "UPDATE hotels SET " + attributeName + "=? WHERE HOTEL_ID=?";
		int recsAffected = 0;
		
		try(
			PreparedStatement preparedStatement = connect.prepareStatement(query);
		){
			preparedStatement.setString(1, attributeValue);
			preparedStatement.setInt(2, hotelID);
						
			myLogger.info("Query Execution : " + query);
			recsAffected = preparedStatement.executeUpdate();
			if(recsAffected > 0){
				myLogger.info("Hotel Table Updated."
							+ "\nHotel ID : " + hotelID
							+ "\nColumn Name : " + attributeName
							+ "Column Value : " + attributeValue);
			}
			else{
				myLogger.error("System Error");
				throw new BookingException("System Error. Try Again Later.");
				
			}
			
		} catch (SQLException e) {
			myLogger.error("Exception from updateHotelDetails()", e);
			throw new BookingException("Problem in updating data.", e);
		}
		return recsAffected;
	}

	@Override
	public int updateRoomDetails(int roomID, String attributeName,
			String attributeValue) throws BookingException {
		myLogger.info("Execution in updateRoomDetails()");
		
		String query = "UPDATE roomdetails SET " +attributeName+"=? WHERE room_ID=?";
		int recsAffected = 0;
		
		try(
			PreparedStatement preparedStatement = connect.prepareStatement(query);
		){
			
			preparedStatement.setString(1, attributeValue);
			preparedStatement.setInt(2, roomID);
						
			myLogger.info("Query Execution : " + query);
			recsAffected = preparedStatement.executeUpdate();
			
			if(recsAffected > 0){
				myLogger.info("Room Table Updated."
						+ "\nRoom ID : " + roomID
						+ "\nColumn Name : " + attributeName
						+ "Column Value : " + attributeValue);
			}
			else{
				myLogger.error("System Error");
				throw new BookingException("System Error. Try Again Later.");
				
			}
			
		} catch (SQLException e) {
			myLogger.error("Exception from updateRoomDetails()", e);
			throw new BookingException("Problem in updating data.", e);
		}
		return recsAffected;
	}

	@Override
	public List<BookingBean> viewBookingsOfHotel(int hotelID) throws BookingException {
		List<BookingBean> bookingList = new ArrayList<BookingBean>();
		myLogger.info("Execution in viewBookingsOfHotel()");
		String query = "SELECT * FROM bookingdetails b WHERE b.room_id in (SELECT r.room_id from roomdetails r "
				+ "WHERE r.hotel_id = ?)";
		ResultSet resultSet = null;
		
		try(
			PreparedStatement preparedStatement = connect.prepareStatement(query);
		){
			preparedStatement.setInt(1, hotelID);
			myLogger.info("Query Execution : " + query);
			resultSet = preparedStatement.executeQuery();
			
			while(resultSet.next()){
				int bookingID = Integer.parseInt(resultSet.getString("BOOKING_ID"));
				int userID = resultSet.getInt("USER_ID");
				int roomID = resultSet.getInt("ROOM_ID");
				int numAdults = resultSet.getInt("NO_OF_ADULTS");
				int numChildren = resultSet.getInt("NO_OF_CHILDREN");
				float amount = resultSet.getFloat("AMOUNT");
				LocalDate bookedFrom = resultSet.getDate("BOOKED_FROM").toLocalDate();
				LocalDate bookedTo = resultSet.getDate("BOOKED_TO").toLocalDate();
				
				bookingList.add(new BookingBean(bookingID, roomID, userID, numAdults, numChildren, amount, bookedFrom, bookedTo));
			}
			
		} catch (SQLException e) {
			myLogger.error("Exception from viewBookingsOfHotel()", e);
			throw new BookingException("Problem in retrieving data.", e);
		}
		return bookingList;
	}

	@Override
	public List<BookingBean> viewBookingsOfDate(LocalDate localDate) throws BookingException {
		List<BookingBean> bookingList = new ArrayList<BookingBean>();
		myLogger.info("Execution in getBookingsOfDate()");
		String query = "SELECT * FROM bookingdetails WHERE ? BETWEEN BOOKED_FROM AND BOOKED_TO";
		ResultSet resultSet = null;
		
		try(
			PreparedStatement preparedStatement = connect.prepareStatement(query);
		){
			Date sqlDate = Date.valueOf(localDate);
			preparedStatement.setDate(1, sqlDate);
						
			myLogger.info("Query Execution : " + query);
			resultSet = preparedStatement.executeQuery();
			
			while(resultSet.next()){
				int bookingID = resultSet.getInt("BOOKING_ID");
				int userID = resultSet.getInt("USER_ID");
				int roomID = resultSet.getInt("ROOM_ID");
				int numAdults = resultSet.getInt("NO_OF_ADULTS");
				int numChildren = resultSet.getInt("NO_OF_CHILDREN");
				float amount = resultSet.getFloat("AMOUNT");
				LocalDate bookedFrom = resultSet.getDate("BOOKED_FROM").toLocalDate();
				LocalDate bookedTo = resultSet.getDate("BOOKED_TO").toLocalDate();
				
				bookingList.add(new BookingBean(bookingID, roomID, userID, numAdults, numChildren, amount, bookedFrom, bookedTo));
			}
			
		} catch (SQLException e) {
			myLogger.error("Exception from getBookingsOfDate()", e);
			throw new BookingException("Problem in retrieving data.", e);
		}
		return bookingList;
	}

	@Override
	public boolean deleteHotelDetails(int hotelID) throws BookingException {
		myLogger.info("Execution in deleteHotelDetails()");
		
		String query = "DELETE FROM hotels WHERE hotel_ID=?";
		int recsAffected = 0;
		
		try(
			PreparedStatement preparedStatement = connect.prepareStatement(query);
		){
			preparedStatement.setInt(1, hotelID);
						
			myLogger.info("Query Execution : " + query);
			recsAffected = preparedStatement.executeUpdate();
			
			if(recsAffected > 0){
				myLogger.info("1 row deleted from hotels."
						+ "\nHotel ID of deleted row : " + hotelID);
			}
			else{
				myLogger.error("System Error");
				throw new BookingException("System Error. Try Again Later.");
			}
			
		} catch (SQLException e) {
			myLogger.error("Exception from deleteHotelDetails()", e);
			throw new BookingException("Problem in deleting data.", e);
		}
		return true;
	}

	@Override
	public boolean deleteRoomDetails(int roomID) throws BookingException {
		myLogger.info("Execution in deletRoomDetails()");
		
		String query = "DELETE FROM roomdetails WHERE room_ID=?";
		int recsAffected = 0;
		
		try(
			PreparedStatement preparedStatement = connect.prepareStatement(query);
		){
			preparedStatement.setInt(1, roomID);
						
			myLogger.info("Query Execution : " + query);
			recsAffected = preparedStatement.executeUpdate();
			
			if(recsAffected > 0){
				myLogger.info("1 row deleted from roomdetails."
						+ "\nRoom ID of deleted row : " + roomID);
			}
			else{
				myLogger.error("System Error");
				throw new BookingException("System Error. Try Again Later.");
				
			}
			
		} catch (SQLException e) {
			myLogger.error("Exception from deleteRoomDetails()", e);
			throw new BookingException("Problem in deleting data.", e);
		}
		return true;
	}

	@Override
	public List<UserBean> viewGuestList(int hotelID) throws BookingException {
		List<UserBean> bookingList = new ArrayList<UserBean>();
		myLogger.info("Execution in viewGuestList()");
		String query = "SELECT * FROM users u WHERE u.user_id in (SELECT b.user_id FROM bookingdetails b "
				+ "WHERE b.room_id in (SELECT r.room_id FROM roomdetails r WHERE r.hotel_id = ?))";
		ResultSet resultSet = null;
		
		try(
			PreparedStatement preparedStatement = connect.prepareStatement(query);
		){
			preparedStatement.setInt(1, hotelID);
						
			myLogger.info("Query Execution : " + query);
			resultSet = preparedStatement.executeQuery();
			
			while(resultSet.next()){
				String userName = resultSet.getString("USER_NAME");
				int userID = resultSet.getInt("USER_ID");
				String role = resultSet.getString("ROLE");
				String password = "";
				String mobileNumber = resultSet.getString("MOBILE_NO");
				String address = resultSet.getString("ADDRESS");
				String email = resultSet.getString("EMAIL");
				String phoneNumber = resultSet.getString("PHONE");
				
				bookingList.add(new UserBean(userID, password, role, userName, mobileNumber, address, email, phoneNumber));
			}
			
		} catch (SQLException e) {
			myLogger.error("Exception from viewGuestList()", e);
			throw new BookingException("Problem in retrieving data.", e);
		}
		return bookingList;
	}
}
